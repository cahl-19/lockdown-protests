/*
 * This File is Part of LDProtest
 * Copyright (C) 2021 Covid Anti Hysterics League
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Lesser Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
*/

plugins {
    id 'java'
    id 'application'
    id "com.github.node-gradle.node" version "3.0.1"
    id 'nebula.ospackage' version "8.5.6"
}

repositories {
    jcenter()
    mavenCentral()
}

node {
    download = true
}

configurations.all {
    exclude group: 'org.slf4j', module: 'slf4j-simple'
}

dependencies {
    implementation "com.sparkjava:spark-core:2.8.0"
    implementation "org.slf4j:slf4j-simple:1.7.25"
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'ch.qos.logback:logback-core:1.2.3'
    implementation 'com.sparkjava:spark-template-handlebars:2.7.1'
    implementation 'com.github.jknack:handlebars:4.0.6'
    implementation 'org.mongodb:mongo-java-driver:3.12.8'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'info.picocli:picocli:4.6.1'
    implementation 'com.auth0:java-jwt:3.12.0'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.68'
    implementation 'org.yaml:snakeyaml:1.27'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
}

ext.deployPrefix = project.hasProperty('prefix') ? project.prefix : '/opt/ldprotest'

task copyVersionInfo(type: Copy) {

    dependsOn processResources

    from file("${projectDir}/version.txt")
    into file("${buildDir}/resources/main/info")
}

task copyLeafletAssets(type: Copy) {
        from file("${buildDir}/node_modules/leaflet/dist/images")
        into file("${buildDir}/resources/main/assets/leaflet/")
}

task copyBootstrapIcons(type: Copy) {
        from file("${buildDir}/node_modules/bootstrap-icons/bootstrap-icons.svg")
        into file("${buildDir}/resources/main/assets/bootstrap/")
}

task copyBootstrapIndividualIcons(type: Copy) {
    from file("${buildDir}/node_modules/bootstrap-icons/icons/")
    into file("${buildDir}/resources/main/assets/bootstrap/icons/")
}

task copyNpmAssets {
    dependsOn copyLeafletAssets, copyBootstrapIcons, copyBootstrapIndividualIcons
}


node {
    nodeModulesDir = file("${buildDir}/node_modules")
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources", "src/main/html", "${buildDir}/webpack"
        }
    }
}

classes {
    dependsOn copyVersionInfo
}

compileJava {
    dependsOn yarn_build
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

jar {
    dependsOn copyNpmAssets
}

test {
    useJUnitPlatform()
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'
}

yarn_build {
    dependsOn yarn_install
}

yarn_install {
    args = ['--ignore-optional']
}

application {
    mainClassName = 'ldprotest.main.Main'
    applicationDefaultJvmArgs = [\
        '--add-opens java.base/java.lang.reflect=ALL-UNNAMED',
        '--add-opens java.base/java.util=ALL-UNNAMED'
    ]
}

ext.countLeadWhitespace = { line ->
    def count = 0
    for(c in line) {
        if(c == ' ' || c == '\t') {
            count += 1
        } else {
            return count
        }
    }
    return count;
}

ext.removeLeadWhitespace = { line, count ->
    return line.substring(Math.min(countLeadWhitespace(line), count))
}

ext.unindent = { text ->
    def indent = 0
    def outText = ''

    for(line in text.split('\n')) {
        if(indent == 0) {
            indent = countLeadWhitespace(line);
        }
        outText += removeLeadWhitespace(line, indent) + '\n';
    }
    return outText
}

task makeRunScripts {
    dependsOn compileJava
    doLast {
        def cp = sourceSets.main.runtimeClasspath.asPath
        def jvmArgs = applicationDefaultJvmArgs.join(" ")

        def runServer = new File("${projectDir}/scripts", "run-server")
        def createUser = new File("${projectDir}/scripts", "make-user")

        runServer.text = unindent(
            """#!/bin/bash
                exec java ${jvmArgs} -cp ${cp} ${mainClassName} "\${@}"
            """
        )
        runServer.setExecutable(true);

         createUser.text = unindent(
            """#!/bin/bash
                exec java -Dlogging.appender.STDOUT.level=ERROR \\
                    ${jvmArgs} -cp ${cp} ldprotest.server.auth.CmdLineCreateUser "\${@}"
            """
        )
        createUser.setExecutable(true);
    }
}

build {
    dependsOn makeRunScripts
}

task release {
    dependsOn build
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(release) || taskGraph.hasTask(deployDeb)) {
        yarn_build.args = ["--mode=production"]
    } else {
        yarn_build.args = ["--mode=development"]
    }
}

task makeDebFiles {
    doLast {
        mkdir "${projectDir}/build/deb-install"

        def escaped_single_quote = "'\"'\"'";

        def keystore = (
            "${escaped_single_quote}${deployPrefix}/var/lib/ldprotest/jwt-keys${escaped_single_quote}"
        ).replace("/", "\\/")
        def logback_path = (
            "${escaped_single_quote}${deployPrefix}/etc/ldprotest/logback.xml${escaped_single_quote}"
        ).replace("/", "\\/")

        def runscript = new File("${projectDir}/build/deb-install", "ldprotest")
        def createUser = new File("${projectDir}/build/deb-install", "make-user")
        def service = new File("${projectDir}/build/deb-install", "ldprotest.service")
        def preinst = new File("${projectDir}/build/deb-install", "preInstall.sh")
        def postinst = new File("${projectDir}/build/deb-install", "postInstall.sh")
        def postUninst = new File("${projectDir}/build/deb-install", "postUninstall.sh")
        def preUninst = new File("${projectDir}/build/deb-install", "preUninstall.sh")

        def jvmArgs = applicationDefaultJvmArgs.join(" ")
        def cp = "${deployPrefix}/lib/ldprotest/*"

        createUser.text = unindent(
            """#!/bin/bash
                JAVA="\$(find /usr/lib/jvm/  -maxdepth 1 -name "java-11-openjdk*" | head -n1)/bin/java"
                exec "\${JAVA} -Dlogging.appender.STDOUT.level=ERROR \\
                    ${jvmArgs} -cp ${cp} ldprotest.server.auth.CmdLineCreateUser "\${@}"
            """
        )
        runscript.text = unindent(
            """#!/bin/bash\n\
                JAVA="\$(find /usr/lib/jvm/  -maxdepth 1 -name "java-11-openjdk*" | head -n1)/bin/java"
                exec "\${JAVA}" -Dlogging.appender.STDOUT.level=ERROR ${jvmArgs} -cp '${cp}' ${mainClassName} "\${@}"
            """
        )
        service.text = unindent(
            """
                [Unit]
                    Description=ldprotest HTTP Server
                    After=network.target

                [Service]
                    Type=simple
                    Restart=always
                    RestartSec=1
                    User=ldprotest
                    ExecStart="${deployPrefix}/bin/ldprotest" -f "${deployPrefix}/etc/ldprotest/config.yml"

                [Install]
                    WantedBy=multi-user.target
            """
        )
        preinst.text = unindent(
            """
                mkdir -p "${deployPrefix}/var/lib/ldprotest/jwt-keys"

                adduser \\
                    --system --home "${deployPrefix}/var/lib/ldprotest" --no-create-home --shell /bin/false \\
                    --group --disabled-password --disabled-login ldprotest

                chown -R ldprotest.ldprotest "${deployPrefix}/var/lib/ldprotest"
                chmod 700 "${deployPrefix}/var/lib/ldprotest/jwt-keys"
            """
        )
        postinst.text = unindent(
            """
                CONFIG="${deployPrefix}/etc/ldprotest/config.yml"
                LOGBACK="${deployPrefix}/etc/ldprotest/logback.xml"
                EX_CONFIG="${deployPrefix}/usr/share/doc/examples/config.yml"
                EX_LOGBACK="${deployPrefix}/usr/share/doc/examples/logback.xml"

                mkdir -p ${deployPrefix}/var/log/ldprotest
                chown -R ldprotest.ldprotest ${deployPrefix}/var/log/ldprotest

                if cmp "\${CONFIG}" "\${EX_CONFIG}"; then
                    sed -i -r 's/^(\\s*fsKeyStorePath: )(.*)/\\1${keystore}/g' "\${CONFIG}"
                    sed -i -r 's/^(\\s*logbackPath: )(.*)/\\1${logback_path}/g' "\${CONFIG}"
                fi

                if cmp "\${LOGBACK}" "\${EX_LOGBACK}"; then
                    sed -i -r \\
                        's/${"(/var/log/ldprotest/)".replace("/", "\\/")}/${deployPrefix.replace("/", "\\/")}\\1/g' \\
                        "\${LOGBACK}"
                fi

                systemctl daemon-reload || true
            """
        )
        preUninst.text = unindent(
            """
                systemctl stop ldprotest || true
                systemctl daemon-reload || true
            """
        )
        postUninst.text = unindent(
            """
                chown -R root.root ${deployPrefix}/var/log/ldprotest

                rm -rf ${deployPrefix}/var/lib/ldprotest/
                deluser ldprotest 1>/dev/null 2>/dev/null || true
            """
        )

        runscript.setExecutable(true, false)
        createUser.setExecutable(true, false)
    }
}

task deployDeb(type: Deb) {

    dependsOn build, makeDebFiles

    packageName = 'ldprotest'
    version = new File("${projectDir}/version.txt").text.strip()
    release = 1

    packager = 'anon'
    maintainer = 'anon'
    uploaders = 'anon'

    user = 'ldprotest'
    permissionGroup = 'ldprotest'

    preInstall file("${projectDir}/build/deb-install/preInstall.sh")
    postInstall file("${projectDir}/build/deb-install/postInstall.sh")
    postUninstall file("${projectDir}/build/deb-install/postUninstall.sh")
    preUninstall file("${projectDir}/build/deb-install/preUninstall.sh")

    configurationFile("${deployPrefix}/etc/ldprotest/config.yml")
    configurationFile("${deployPrefix}/etc/ldprotest/logback.xml")

    requires('openjdk-11-jdk-headless')

    into "${deployPrefix}"

    from("${projectDir}/doc/example/config.yml") {
        fileType CONFIG | NOREPLACE
        into 'etc/ldprotest/'
    }
    from("${projectDir}/doc/example/logback.xml") {
        fileType CONFIG | NOREPLACE
        into 'etc/ldprotest/'
    }


    from("${projectDir}/doc/example/config.yml") {
        into 'usr/share/doc/examples'
    }
    from("${projectDir}/doc/example/logback.xml") {
        into 'usr/share/doc/examples'
    }

    from(jar.outputs.files) {
        into 'lib/ldprotest/'
    }
    from(sourceSets.main.compileClasspath) {
        into 'lib/ldprotest/'
    }
    from("${projectDir}/build/deb-install/ldprotest.service") {
        into 'lib/systemd/system/'
    }
    from("${projectDir}/build/deb-install/ldprotest") {
        into 'bin/'
    }
    from("${projectDir}/build/deb-install/make-user") {
        into 'bin/'
    }

    link('/etc/systemd/system/ldprotest.service', "${deployPrefix}/lib/systemd/system/ldprotest.service")
}